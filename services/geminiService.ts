import { GoogleGenAI, Modality } from "@google/genai";
import { ImageFile, StyleTemplate } from "../types";

const fileToGenerativePart = async (file: File) => {
  const base64EncodedDataPromise = new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (typeof reader.result === 'string') {
        resolve(reader.result.split(',')[1]);
      } else {
        resolve(''); // Should not happen with readAsDataURL
      }
    };
    reader.readAsDataURL(file);
  });
  
  const base64Data = await base64EncodedDataPromise;
  
  return {
    inlineData: {
      data: base64Data,
      mimeType: file.type,
    },
  };
};

export const generateThumbnail = async (
  mainImage: ImageFile,
  elementImages: ImageFile[],
  style: StyleTemplate,
  text: string,
  layoutDescription: string
): Promise<string[]> => {
    const apiKey = process.env.API_KEY;
    if (!apiKey) {
      throw new Error("API_KEY environment variable not set.");
    }
    const ai = new GoogleGenAI({ apiKey });

    const mainImagePart = await fileToGenerativePart(mainImage.file);
    const elementImageParts = await Promise.all(
        elementImages.map(img => fileToGenerativePart(img.file))
    );
    
    const generationPromises = Array.from({ length: 2 }).map(async (_, index) => {
      const textOverlayInstruction = text && text.trim() !== ''
          ? `*   Add the following text: "${text}".
*   The text MUST be extremely readable on mobile screens. Use high-contrast colors, bold fonts, and effects like strokes or shadows as dictated by the chosen style.`
          : `*   NO TEXT OVERLAY. This is a visual-only thumbnail. Do not add any words, letters, or numbers to the image.`;


      const prompt = `
      CRITICAL INSTRUCTIONS FOR THUMBNAIL GENERATION:

      This is variant ${index + 1} of 2. Please provide a slightly different composition or creative take for this variant.

      1.  **CHARACTER CONSISTENCY (HIGHEST PRIORITY):**
          *   The person in the first reference image (the main subject) MUST appear recognizably in the final thumbnail.
          *   Keep their EXACT facial features: face shape, eyes, nose, mouth, hair, skin tone.
          *   DO NOT change their identity or create a generic look-alike. They must be identifiable.

      2.  **LAYOUT FROM USER INPUT:**
          *   The user has provided the following description for the layout: "${layoutDescription || 'Creator has not provided a specific layout, use your best judgement to create a dynamic and engaging composition based on the style guide.'}"
          *   Follow this layout description as closely as possible for placing the main subject and other elements.

      3.  **STYLE APPLICATION:**
          *   Apply the visual style named: "${style.name}".
          *   Use these style guidelines as your primary inspiration: "${style.ai_prompt_template}".
          *   It is crucial to merge the user's described layout and the character's consistent face with this style. The style should influence colors, fonts, and effects, but NOT the person's identity or the core layout.

      4.  **TEXT OVERLAY:**
          ${textOverlayInstruction}

      5.  **TECHNICAL REQUIREMENTS:**
          *   Dimensions: 1280x720 pixels (16:9 aspect ratio).
          *   The final image must be a single, cohesive, professional design, not a simple collage.
          *   Optimize for a high click-through-rate (CTR) on YouTube.

      Based on all these rules, generate the thumbnail using the provided main subject image, element images, and instructions.
      `;

      const allParts = [
        { text: prompt },
        mainImagePart,
        ...elementImageParts
      ];

      const response = await ai.models.generateContent({
          model: 'gemini-2.5-flash-image',
          contents: {
            parts: allParts,
          },
          config: {
              responseModalities: [Modality.IMAGE],
          },
      });

      const firstPart = response.candidates?.[0]?.content?.parts?.[0];
      if (firstPart && 'inlineData' in firstPart && firstPart.inlineData) {
          return firstPart.inlineData.data;
      }

      throw new Error(`No image was generated by the API for variant ${index + 1}.`);
    });

    return Promise.all(generationPromises);
};